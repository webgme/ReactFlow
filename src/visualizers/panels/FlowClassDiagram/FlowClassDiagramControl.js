/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Sep 04 2025 17:08:35 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function FlowClassDiagramControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._updateWidget = null;

        this._META = {};
        this._client.getAllMetaNodes(false).forEach(metaNode => {
            this._META[metaNode.getFullyQualifiedName()] = metaNode;
        });

        // this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    }

    FlowClassDiagramControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    FlowClassDiagramControl.prototype.selectedObjectChanged = function (nodeId) {
        var currentNode = this._client.getNode(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            if (typeof currentNode.getParentId() === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = currentNode.getParentId();

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            self._selfPatterns[nodeId] = {children: 2};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    FlowClassDiagramControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0;

        if (events[0] && events[0].etype === 'complete') {
            //we have what we need
            this._createDescriptor();
        }
    };

    FlowClassDiagramControl.prototype._createDescriptor = function () {
        const MainNode = this._client.getNode(this._currentNodeId);
        const descriptor = {nodes:[], edges:[], global: {
            setPosition: this.updatePositionOfNode.bind(this),
            addClass: this.addClass.bind(this),
            deleteClass: this.deleteClass.bind(this),
            addAttribute: this.addAttribute.bind(this),
            deleteAttribute: this.deleteAttribute.bind(this),
            addMethod: this.addMethod.bind(this),
            deleteMethod: this.deleteMethod.bind(this),
            deleteAssociation: this.deleteAssociation.bind(this),
            createAssociation: this.createAssociation.bind(this)
        }};
        
        MainNode.getChildrenIds().forEach(childId => {
            const childNode = this._client.getNode(childId);
            if(childNode.isInstanceOf(this._META['Class'].getId())) {
                descriptor.nodes.push(this._createClassDescriptor(childId));
            } else if(childNode.isInstanceOf(this._META['Association'].getId())) {
                const connectionDescriptor = {
                    id: childId,
                    type:'smoothstep', 
                    source: childNode.getPointerId('src'), 
                    target: childNode.getPointerId('dst'),
                    data: {
                        startLabel: childNode.getAttribute('sRole') + ' (' + childNode.getAttribute('sCard') + ')',
                        startCardinality: childNode.getAttribute('sCard'),
                        startRole: childNode.getAttribute('sRole'),
                        endLabel: childNode.getAttribute('dRole') + ' (' + childNode.getAttribute('dCard') + ')',
                        endCardinality: childNode.getAttribute('dCard'),
                        endRole: childNode.getAttribute('dRole'),
                    }
                };
                if(childNode.isInstanceOf(this._META['NavigableAssociation'].getId())) {
                    connectionDescriptor.type = 'navigableAssociation';
                } else if(childNode.isInstanceOf(this._META['Aggregation'].getId())) {
                    connectionDescriptor.type = 'aggregation';
                } else if(childNode.isInstanceOf(this._META['Inheritance'].getId())) {
                    connectionDescriptor.type = 'inheritance';
                } else if(childNode.isInstanceOf(this._META['Composition'].getId())) {
                    connectionDescriptor.type = 'composition';
                } else if(childNode.isInstanceOf(this._META['Association'].getId())) {
                    connectionDescriptor.type = 'association';
                }
                
                descriptor.edges.push(connectionDescriptor);
            }
        });
        this._setDescriptor(descriptor);
    }

    FlowClassDiagramControl.prototype._createClassDescriptor = function (classId) {
        const classNode = this._client.getNode(classId);
        const data = {
            label: classNode.getAttribute('name'),
            stereotype: classNode.getAttribute('stereotype'),
            attributes:[], 
            methods:[]
        };
        classNode.getChildrenIds().forEach(childId => {
            const childNode = this._client.getNode(childId);
            if(childNode.isInstanceOf(this._META['Attribute'].getId())) {
                data.attributes.push({
                    id: childId,
                    name:childNode.getAttribute('name'),
                    type:childNode.getAttribute('type'),
                    visibility:childNode.getAttribute('visibility')
                });
            } else if(childNode.isInstanceOf(this._META['Method'].getId())) {
                data.methods.push({
                    id: childId,
                    name:childNode.getAttribute('name'),
                    visibility:childNode.getAttribute('visibility')
                });
            }
        });


        return {
            id: classId, 
            type: 'class',
            position: classNode.getRegistry('position'),
            data
        };
    }

    FlowClassDiagramControl.prototype.registerUpdate = function (func) {
        const firstTry = this._updateWidget === null ? true : false;
        this._updateWidget = func;
        if(this._descriptor && firstTry) {
            this._updateWidget(this._descriptor);
        }
    };

    FlowClassDiagramControl.prototype._setDescriptor = function (descriptor) {
        this._descriptor = descriptor;

        if(this._updateWidget) {
            this._updateWidget(descriptor);
        }
    };

    FlowClassDiagramControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FlowClassDiagramControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    FlowClassDiagramControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    FlowClassDiagramControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    FlowClassDiagramControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    FlowClassDiagramControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };
    /* * * * * * * * * * Change Management * * * * * * * * * */
    FlowClassDiagramControl.prototype.updatePositionOfNode = function (nodeId, position) {
        this._logger.debug('Updating position of node:', nodeId, 'to:', position);
        const node = this._client.getNode(nodeId);
        this._client.setRegistry(nodeId, 'position', position, 'Class [' + node.getAttribute('name') + '] have been repositioned.');
    };
    
    FlowClassDiagramControl.prototype.addClass = function(name) {
        this._client.createNode({parentId: this._currentNodeId, baseId: this._META['Class'].getId()}, {attributes: {name: name}},'New Class [' + name + '] have been added.');
    };

    FlowClassDiagramControl.prototype.deleteClass = function(nodeId) {
        const name = this._client.getNode(nodeId).getAttribute('name');
        this._client.startTransaction('Deleting Class [' + name + ']');
        this._client.getNode(this._currentNodeId).getChildrenIds().forEach(childId => {
            const childNode = this._client.getNode(childId);
            if(childNode.isInstanceOf(this._META['Association'].getId()) &&
                (childNode.getPointerId('src') === nodeId || childNode.getPointerId('dst') === nodeId)) {
                this._client.deleteNode(childId);
            }
        });
        this._client.deleteNode(nodeId, 'Class [' + this._client.getNode(nodeId).getAttribute('name') + '] have been deleted.');
        this._client.completeTransaction('Class [' + name + '] have been deleted');
    };

    FlowClassDiagramControl.prototype.deleteAssociation = function(nodeId) {
        this._client.deleteNode(nodeId, 'An association have been deleted.');
    };

    FlowClassDiagramControl.prototype.addAttribute = function(nodeId, name, visibility, type) {
        const classNode = this._client.getNode(nodeId);
        this._client.createNode({
            parentId: nodeId, 
            baseId: this._META['Attribute'].getId()
        }, 
        {attributes: {
            name: name, 
            visibility: visibility, 
            type: type}
        },
        'New Attribute [' + name + '] have been added to Class [' + classNode.getAttribute('name') + ']');
    };

    FlowClassDiagramControl.prototype.deleteAttribute = function(classId, attributeId, name) {
        const classNode = this._client.getNode(classId);
        this._client.deleteNode(attributeId, 
            'Attribute [' + name + 
            '] have been deleted from Class [' + 
            classNode.getAttribute('name') + ']');
    };

    FlowClassDiagramControl.prototype.addMethod = function(nodeId, visibility, specification) {
        this._client.createNode({
            parentId: nodeId, 
            baseId: this._META['Method'].getId()
        }, {attributes: {visibility: visibility, name: specification}});
    };

    FlowClassDiagramControl.prototype.deleteMethod = function(classId, methodId) {
        const classNode = this._client.getNode(classId);
        this._client.deleteNode(
            methodId, 
            'Method [' + methodId + 
            '] have been deleted from Class [' + 
            classNode.getAttribute('name') + ']');
    };

    FlowClassDiagramControl.prototype.createAssociation = function(sourceId, targetId, type) {
        this._client.startTransaction('Creating Association [' + type + ']');
        const link =this._client.createNode({
            parentId: this._currentNodeId, 
            baseId: this._META[type].getId()
        }, {});
        this._client.setPointer(link, 'src', sourceId);
        this._client.setPointer(link, 'dst', targetId);
        this._client.completeTransaction('Association [' + type + '] have been created');
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    FlowClassDiagramControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    FlowClassDiagramControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    FlowClassDiagramControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    FlowClassDiagramControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return FlowClassDiagramControl;
});
