/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Sep 10 2025 11:05:19 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function FlowListControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._updateWidget = null;

        this._META = {};
        this._client.getAllMetaNodes(false).forEach(metaNode => {
            this._META[metaNode.getFullyQualifiedName()] = metaNode;
        });

        this._logger.debug('ctor finished');
    }

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    FlowListControl.prototype.selectedObjectChanged = function (nodeId) {
        var currentNode = this._client.getNode(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};

            
            if (typeof currentNode.getParentId() === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = currentNode.getParentId();

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            self._selfPatterns[nodeId] = {children: 1};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    FlowListControl.prototype._createDescriptor = function () {
        const MainNode = this._client.getNode(this._currentNodeId);
        const descriptor = {elements:[], global: {
            enterElement: this.enterElement.bind(this),
            deleteElement: this.deleteElement.bind(this),
            exitElement: this.exitElement.bind(this)
        }};
        
        MainNode.getChildrenIds().forEach(childId => {
            const childNode = this._client.getNode(childId);
            descriptor.elements.push({
                id: childId,
                type: 'ClassDiagram',
                name: childNode.getAttribute('name')
            });
        });

        this._setDescriptor(descriptor);
    };

    FlowListControl.prototype.registerUpdate = function (func) {
        const firstTry = this._updateWidget === null ? true : false;
        this._updateWidget = func;
        if(this._descriptor && firstTry) {
            this._updateWidget(this._descriptor);
        }
    };

    FlowListControl.prototype._setDescriptor = function (descriptor) {
        this._descriptor = descriptor;

        if(this._updateWidget) {
            this._updateWidget(descriptor);
        }
    };
    /* * * * * * * * Node Event Handling * * * * * * * */
    FlowListControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0;

        if (events[0] && events[0].etype === 'complete') {
            //we have what we need
            this._createDescriptor();
        }
    };

    FlowListControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    FlowListControl.prototype.enterElement = function (elementId) {
        WebGMEGlobal.State.registerActiveObject(elementId);
    };

    FlowListControl.prototype.deleteElement = function (elementId) {
        this._client.deleteNode(elementId, 'Diagram [' + this._client.getNode(elementId).getAttribute('name') + '] have been deleted.');
    };

    FlowListControl.prototype.exitElement = function (elementId) {  
        WebGMEGlobal.State.registerActiveObject(this._currentNodeParentId || '');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FlowListControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    FlowListControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    FlowListControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    FlowListControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    FlowListControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    FlowListControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    FlowListControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    FlowListControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    FlowListControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return FlowListControl;
});
